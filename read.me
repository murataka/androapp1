		Mobile JS Frameworks
	-Advantages, Disadvantages, Browser Support
	
	Mobile js frameworks have very big disadvantages about performance. Although mobile devices are getting 
	faster by day , they are still not as fast as desktop computers. This makes a bad user experience.  

	* 1) Rich user experience (native wins)

85% of mobile professionals in a March, 2013 Compuware survey preferred mobile apps over mobile websites. One of the main reasons was the richer experience users get with native apps. Features like VR, NFC, and passport simply aren’t available in HTML. Where HTML has 30-50 native device capabilities open to it, native developers have access to 6,000-7,000.

	* 2) Performance (native wins)

When it comes to both loading and rendering, whether you have good, weak, or terrible internet access, native is always faster. Click on a calendar event in a native app, for example, and it opens instantly. The time it takes to do the same in an HTML app typically drives people nuts.
	* 3) Monetization for developers (native wins)

Recent numbers from Canalys report that native app developers’ combined income in Q1 2013 was $2.2 billion. In contrast, the monetization available to developers building HTML5 apps is essentially zero. It’s pretty obvious, then, that financially ambitious app owners need a massive incentive to move out of the app store fold.
	* 4) Cross platform development costs (HTML wins, but by less than you’d think)

This is usually seen as a big point in HTML’s favor. The line is that you ‘write once, run anywhere,’ and that’s true, but only up to a point. You certainly have to factor in costs for going native for multiple OSs, although solutions like Appcelerator will help reduce those costs significantly. But they are not zero with HTML5, either, thanks to the next point of comparison: fragmentation.
	* 5) Fragmentation challenges (a wash)

If it’s a challenge to develop apps for multiple platforms (and for different versions of those platforms), even with Appcelerator’s help, it’s not the case that developers writing for the mobile web are writing simply for one HTML5. There are at least 15 mobile browsers in existence, each available in different versions and each supporting different levels of HTML. So there’s a fragmentation challenge with both. On this measure, the two are pretty much a wash.

	* 6) Availability of programming expertise (HTML wins)

There’s no debate here. There are millions of HTML developers out there who will look at HTML5 and say, ‘eureka, I can now develop mobile apps.’ Objective-C, meanwhile, and to some degree Java, are much harder to learn, and people who know them are harder to find and cost more to hire. Again, solutions like Appcelerator’s address this by using JavaScript, a language that pretty much every web developer knows well, but the overall comparison still favors HTML5.

	* 7) Immediate updates & distribution control (HTML wins)

Mobile is all about constantly innovating. Because they don’t sit on the device, HTML5 apps can be instantly updated. In contrast, having to go an app store for an update remains a barrier to offering the best, most up-to-date experience. A win, then, for HTML.  

	* 8) Timely access to new OS innovations (native wins big)

Apple and Google offer, on average, 1-3 updates a year that offer major new capabilities. When they are making so much money from their app businesses (see #3 above), they have every incentive to coral those new capabilities within their native OSs and zero incentive to offer them in HTML. Meanwhile, it takes years for the HTML consortium to ratify new standards. At the rate at which device manufacturers are innovating, there’s no way that the HTML consortium can move swiftly enough to compete.

	* 9) Security (native wins big)

People are increasingly worried about security, especially as mobile moves ever further into the enterprise and, frankly, there is no way that anyone could say that HTML is more secure than a native app. Native clearly wins thanks to:

- the security of the source code of itself; browser source code is open for all to see, and to then work around.

- the security of data at rest on the device; on a native app, it’s completely secure. In HTML, the browser is typically not secure and as a result exposes the data it’s accessing within its caches.

- the security of data in transit; when using HTML, you are pretty much restricted to using SSL. VPNs are just too slow. With native apps, you can also run VPNs and other encrypted solutions, without ruining performance.

- URL security vulnerabilities; these are unique to web applications and beloved by hackers. Native apps simply don’t have them, so hackers can’t get into native apps in the same way.

http://www.businessinsider.com/html5-vs-native-apps-for-mobile-2013-6
